function replaceRegex(message: string, regex: string, replaceTo: string) :: string:
    set {_splited::*} to regex split {_message} using {_regex}
    set {_result} to ""
    if size of {_splited::*} > 1:
        set {_result} to join {_splited::*} with delimiter {_replaceTo}
    else:
        set {_result} to join {_splited::*}
    
    return {_result}

on chat:
    if message partially matches "(.)\1{3,}":
        set {_message} to message
        set {_messageTemp} to message
        set {_splited::*} to regex split {_messageTemp} using "(.)\1{3,}"
        loop {_splited::*}:
            replace first "%loop-value%" in {_message} with ""
        set {_message} to subtext of {_message} from character 1 to 3
        set {_result} to join {_splited::*} with delimiter {_message}
        set message to {_result}
    if message partially matches "(..)\1{3,}":
        set {_message} to message
        set {_messageTemp} to message
        set {_splited::*} to regex split {_messageTemp} using "(..)\1{3,}"
        loop {_splited::*}:
            replace first "%loop-value%" in {_message} with ""
        set {_message} to subtext of {_message} from character 1 to 6
        set {_result} to join {_splited::*} with delimiter {_message}
        set message to {_result}
