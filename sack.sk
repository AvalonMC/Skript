on load:
    set {SACK_MINING::*} to "stone", "cobblestone", "deepslate", "cobbled_deepslate", "diorite", "granite", "andesite", "tuff", "calcite", "sand", "sandstone", "red_sand", "red_sandstone", "gravel", "prismarine", "ice", "grass_block", "podzol", "mycelium", "dirt", "moss_block", "mud", "dripstone_block", "brown_terracotta", "red_terracotta", "orange_terracotta", "terracotta", "light_gray_terracotta", "yellow_terracotta", "white_terracotta", "sponge", "wet_sponge", "coal", "raw_copper", "copper_ingot", "raw_iron", "iron_ingot", "raw_gold", "gold_ingot", "diamond", "redstone", "sculk", "snowball", "clay_ball", "prismarine_shard", "prismarine_crystals", "amethyst_shard", "emerald", "lapis_lazuli", "flint", "netherrack", "soul_sand", "soul_soil", "blackstone", "basalt", "magma_block", "nether_brick", "quartz", "gold_nugget", "ancient_debris", "netherite_scrap", "glowstone_dust", "glowstone", "crimson_nylium", "warped_nylium", "shroomlight", "nether_wart_block", "warped_wart_block", "end_stone", "amethyst_block", "obsidian", "crying_obsidian", "smooth_basalt", "dead_horn_coral_block", "dead_fire_coral_block", "dead_bubble_coral_block", "dead_brain_coral_block" and "dead_tube_coral_block"
    
    set {SACK_FARMING::*} to "oak_log", "birch_log", "spruce_log", "jungle_log", "acacia_log", "dark_oak_log", "mangrove_log", "cherry_log", "warped_stem", "crimson_stem", "bamboo", "cactus", "kelp", "azalea", "flowering_azalea", "wheat", "potato", "carrot", "beetroot", "pumpkin", "melon_slice", "chorus_fruit", "nether_wart", "apple", "wheat_seeds", "cocoa_beans", "brown_mushroom", "beetroot_seeds", "pumpkin_seeds", "melon_seeds", "sugar_cane", "glow_berries", "sweet_berries", "cod", "salmon", "red_mushroom", "chicken", "rabbit", "rabbit_hide", "mutton", "porkchop", "beef", "milk_bucket", "oak_sapling", "birch_sapling", "spruce_sapling", "jungle_sapling", "acacia_sapling", "dark_oak_sapling", "mangrove_propagule", "cherry_sapling", "warped_fungus", "crimson_fungus", "lily_pad", "vine", "wither_rose", "glow_lichen" and "sea_pickle"
    
    set {SACK_HUNTING::*} to "rotten_flesh", "bone", "arrow", "spider_eye", "string", "gunpowder", "ender_pearl", "phantom_membrane", "slime_ball", "glow_ink_sac", "leather", "rabbit_hide", "blaze_rod", "magma_cream", "ghast_tear", "shulker_shell", "dragon_breath", "honey_bottle", "ink_sac", "honeycomb", "scute", "pufferfish", "feather", "nautilus_shell", "sniffer_egg", "turtle_egg", "egg", "shugar", "glowstone_dust" and "echo_shard"

    set {SERVER} to "survival_main"

    applyCache()

#get free space of item in sack
function getSackFreeSpace(who: player, category: string, id: string) :: number:
    set {_i} to 0
    set {_capacity_mining} to 0
    set {_capacity_farming} to 0
    set {_capacity_hunting} to 0
    #amount in sack
    set {_result} to getSscore("%{_who}%", "sack.%{_id}%") parsed as number
    #parse whole inventory
    while {_i} < 42:
        if raw name of slot {_i} of {_who} is "minecraft:recovery_compass":
            set {_CustomModelData} to custom model data of slot {_i} of {_who}
            set {_CustomModelData} to "%{_CustomModelData}%"
            if {_CustomModelData} start with "1600":
                set {_item_limit} to line 4 of lore of slot {_i} of {_who}
                replace "&7Лимит на ресурс: &a" in {_item_limit} with ""
                set {_item_limit} to {_item_limit} parsed as number
                if {_CustomModelData} start with "16001":
                    set {_capacity_mining} to {_capacity_mining} + {_item_limit}
                else if {_CustomModelData} start with "16002":
                    set {_capacity_farming} to {_capacity_farming} + {_item_limit}
                else if {_CustomModelData} start with "16003":
                    set {_capacity_hunting} to {_capacity_hunting} + {_item_limit}
                else if {_CustomModelData} start with "16004":
                    set {_capacity_mining} to {_capacity_mining} + {_item_limit}
                    set {_capacity_farming} to {_capacity_farming} + {_item_limit}
                    set {_capacity_hunting} to {_capacity_hunting} + {_item_limit}
        set {_i} to {_i} + 1
    #whole space - amount in sack = result
    if {_category} is "mining":
        set {_result} to {_capacity_mining} - {_result}
    else if {_category} is "farming":
        set {_result} to {_capacity_farming} - {_result}
    else if {_category} is "hunting":
        set {_result} to {_capacity_hunting} - {_result}
    return {_result}

function applyCache():
    loop all players:
        #loop through items
        loop {!cache::%{SERVER}%::%loop-player%::sack::*}:
            #get category of item
            if {SACK_MINING::*} contains loop-index:
                set {_trigger} to "mining"
            else if {SACK_FARMING::*} contains loop-index:
                set {_trigger} to "farming"
            else if {SACK_HUNTING::*} contains loop-index:
                set {_trigger} to "hunting"
            #add to yaml-scores
            execute console command "/sscore add number %loop-player% sack.%loop-index% %{!cache::%{SERVER}%::%loop-player%::sack::%loop-index%}%"
            #delete cache
            delete {!cache::%{SERVER}%::%loop-player%::sack::%loop-index%}
        #loop through item limits
        loop {!cache::%{SERVER}%::%loop-player%::limit::*}:
            delete {!cache::%{SERVER}%::%loop-player%::limit::%loop-index%}

on inventory open:
    applyCache()

every 5 minutes:
    applyCache()

on player picking up:
    set {_item_type} to type of event-item
    set {_item_amount} to item amount of event-item
    set {_id} to raw name of event-item
    replace all "minecraft:" in {_id} with ""
    set {_CustomModelData} to custom model data of player's offhand item
    set {_CustomModelData} to "%{_CustomModelData}%"
    if raw name of player's offhand item is "minecraft:recovery_compass":
        if custom model data of event-item is 0:
            if {_CustomModelData} start with "1600":
                #choise item category
                if {_CustomModelData} start with "16001":
                    if {SACK_MINING::*} contains "%{_id}%":
                        set {_trigger} to "mining"
                else if {_CustomModelData} start with "16002":
                    if {SACK_FARMING::*} contains "%{_id}%":
                        set {_trigger} to "farming"
                else if {_CustomModelData} start with "16003":
                    if {SACK_HUNTING::*} contains "%{_id}%":
                        set {_trigger} to "hunting"
                else if {_CustomModelData} start with "16004":
                    if {SACK_MINING::*} contains "%{_id}%":
                        set {_trigger} to "mining"
                    else if {SACK_FARMING::*} contains "%{_id}%":
                        set {_trigger} to "farming"
                    else if {SACK_HUNTING::*} contains "%{_id}%":
                        set {_trigger} to "hunting"
                if {_trigger} is set:
                    #set item limit cache
                    if {!cache::%{SERVER}%::%player%::limit::%{_id}%} isn't set:
                        set {!cache::%{SERVER}%::%player%::limit::%{_id}%} to getSackFreeSpace(event-player, {_trigger}, {_id})
                    
                    #if sack have enough space for item
                    if {!cache::%{SERVER}%::%player%::limit::%{_id}%} >= {_item_amount}:
                        #set item cache and add item amount
                        if {!cache::%{SERVER}%::%player%::sack::%{_id}%} isn't set:
                            set {!cache::%{SERVER}%::%player%::sack::%{_id}%} to {_item_amount}
                        else:
                            set {!cache::%{SERVER}%::%player%::sack::%{_id}%} to {!cache::%{SERVER}%::%player%::sack::%{_id}%} + {_item_amount}
                        #remove item amount from item limit in sack
                        set {!cache::%{SERVER}%::%player%::limit::%{_id}%} to {!cache::%{SERVER}%::%player%::limit::%{_id}%} - {_item_amount}
                        play sound "entity.sniffer.sniffing" in player category with volume 1 with pitch 2 for {_who}
                        delete event-dropped item
                        cancel event
                    else if {!cache::%{SERVER}%::%player%::limit::%{_id}%} < {_item_amount}:
                        #calculate amount of item on the groud after sack trigger
                        set {_rest} to {_item_amount} - {!cache::%{SERVER}%::%player%::limit::%{_id}%}
                        
                        if {!cache::%{SERVER}%::%player%::limit::%{_id}%} > 0:
                            #set item cache
                            if {!cache::%{SERVER}%::%player%::sack::%{_id}%} isn't set:
                                set {!cache::%{SERVER}%::%player%::sack::%{_id}%} to {!cache::%{SERVER}%::%player%::limit::%{_id}%}
                            else:
                                set {!cache::%{SERVER}%::%player%::sack::%{_id}%} to {!cache::%{SERVER}%::%player%::sack::%{_id}%} + {!cache::%{SERVER}%::%player%::limit::%{_id}%}
                            #limit after trigger always 0
                            set {!cache::%{SERVER}%::%player%::limit::%{_id}%} to 0
                            delete event-dropped item
                            #impossible to change amount of event-item so delete them and dropped new one
                            drop {_rest} of event-item at player without velocity
                            play sound "entity.sniffer.sniffing" in player category with volume 1 with pitch 2 for {_who}
                            cancel event
